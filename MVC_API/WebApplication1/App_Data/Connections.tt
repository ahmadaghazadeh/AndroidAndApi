<#@ template language="C#"  hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)\packages\AdoManager.1.1.83\lib\net45\AdoManager.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="AdoManager" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     This file is a T4 Text Template for generate automatically your 
//     connection strings in from "App.config" or "Web.config" files.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;
using AdoManager;

public static partial class Connections
{
	<#
	string path =  Host.ResolvePath("..");
    string configPath = File.Exists(Path.Combine(path, "Web.config"))
		? "Web.config"
		: "App.config";
			
	string designTimePath = Path.Combine(path, configPath);
	configPath = (configPath == "App.config") ? "appName + \".config\"" : "\"Web.config\"";

	if(File.Exists(designTimePath)) 
	{
		// Set Database Connection from App.config or Web.config
		var data = File.ReadAllText(designTimePath);

		AdoManager.ConnectionManager.LoadFromXml(data);
		#>

		static Connections()
		{
			// Get runtime application name
			var appName = Path.GetFileName(System.Reflection.Assembly.GetExecutingAssembly().Location);

			// Set Database Connection from App.config or Web.config
			var data = File.ReadAllText(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <#= configPath #>));
			
			// load connections from configure file to AdoManager connections location
			AdoManager.ConnectionManager.LoadFromXml(data);
		}

		<#foreach (var conn in ConnectionManager.GetConnections())
		{#> 
		public static AdoManager.ConnectionManager <#=conn.Name#> { get { return ConnectionManager.Find("<#=conn.Name#>"); } }
		<#}
	}#>

}